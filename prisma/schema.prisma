generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  age      Int
  todos    Todos[] //defines one to many relationship
  //if not written
  // Prisma won’t know that a User has many Todos.
  // You won’t be able to fetch all Todos for a given User using Prisma queries like: 
  // await prisma.user.findUnique({
  // where: { id: 1 },
  // include: { todos: true },  // ✅ Only works if `todos Todos[]` is defined in `User`
  // });
}

// In Prisma, relationships must be explicitly defined in both models (both sides of the relation).
model Todos {
  id          Int     @id @default(autoincrement())
  title       String
  description String? //can be null
  done        Boolean @default(false)
  user_id     Int
  user        User    @relation(fields: [user_id], references: [id])
  // What is user here?
  // user is a virtual field that Prisma automatically resolves to the associated User object.
  // This makes it easy to query related data in Prisma without manually writing SQL joins.
  // const todos = await prisma.todos.findMany({
  // include: { user: true },  // ✅ Fetches the associated user
  // });
}
