generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//data types - String, Int,Float,Decimal.Boolean,DateTime,Json,Bytes //for Scaler fields 
// modifiers - ?,[]

//block attributes @@ ie applies to whole model
//inline attributes @ ie applies to that field  @id,@unique,@default,@updatedAt,@map @ignore @db @relation

//attribute function autoincrement() uuid() cuid() nanoid() now()

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique //automatic indexing if marked unique @db.VarChar(10) //only 10 chars
  password String //@map("pw") the db field name will be pw
  age      Int
  todos    Todos[] 
  
  // newField String? @ignore will be created in db but ignored in ts definitions

  // todos field not created in actual db but for you to work with prisma easily
  // if not written
  // Prisma won’t know that a User has many Todos.
  // You won’t be able to fetch all Todos for a given User using Prisma queries like: 
  // await prisma.user.findUnique({
  // where: { id: 1 },
  // include: { todos: true },  // ✅ Only works if `todos Todos[]` is defined in `User`
  // });

  // @@index([username,id])
  // @@unique([username,age])  //combination of username and age must be unique
  // @@map("UserNaamKaTable")
}

// In Prisma, relationships must be explicitly defined in both models (both sides of the relation).
model Todos {
  id          Int     @id @default(autoincrement())
  title       String
  description String? //can be null
  done        Boolean @default(false)
  user_id     Int
  user        User    @relation(fields: [user_id], references: [id])
  // What is user here?
  // user is a virtual field that Prisma automatically resolves to the associated User object.
  // This makes it easy to query related data in Prisma without manually writing SQL joins.
  // const todos = await prisma.todos.findMany({
  // include: { user: true },  // ✅ Fetches the associated user
  // });
}
